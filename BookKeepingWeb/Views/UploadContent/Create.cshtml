@model BookKeepingWeb.Models.UploadContent
@using BookKeepingWeb.Models

<link rel="stylesheet" href="~/css/tagTheme.css" />

@{
    var tagliststring = System.Text.Json.JsonSerializer.Serialize(Model?.Tags?.Select(i => i.Name).ToList() ?? []);
}

<form asp-controller="UploadContent" asp-action="Create" method="post" enctype="multipart/form-data" id="uploadForm" class="text-center">
    <div style="height: 20px;"></div>
    <!-- Error Modal -->
    <div class="modal fade" id="errorModal" tabindex="-1" aria-labelledby="errorModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="errorModalLabel">Upload Error</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p id="errorModalText"></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal">OK</button>
                </div>
            </div>
        </div>
    </div>

    <span id="error-span" style="color: red"></span>

    <div class="mb-3">
        <label asp-for="Title" class="form-label">Title*</label>
        <input asp-for="Title" required class="form-control" maxlength="90" id="titleInput" oninput="updateTitleCount()" />
        <small id="titleCounter" class="text-muted">0 / 90 characters</small>
    </div>

    <div class="mb-3">
        <label for="Description">Description</label>
        <textarea asp-for="Description" class="form-control" maxlength="490" id="descriptionInput" oninput="updateDescriptionCount()"></textarea>
        <small id="descriptionCounter" class="text-muted">0 / 490 characters</small>
    </div>

    <span asp-validation-for="Tags" class="text-danger"></span>

    <p class="form-label">Predefined Tags helps with filtering content (requires at least 2 or more):</p>
    <div class="mb-3 tag-grid">
        <div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(100px, 1fr)); gap: 10px;">
            @{
                var predefinedTags = new[]
                {
            "Romantic", "Skits", "Fantasy", "Roleplay", "Home", "Projects", "Makeup", "Cosplay",
            "Straight", "Female", "Male", "LGBTQ", "Solo", "Group",
            "Fitness", "Body", "Lifestyle", "Beauty", "Culture",
            "Voices", "Furry", "Cartoon",
            "Nature", "Public", "Office", "Room",
            "AI", "Goals", "Trending", "Anime"
            };

                for (int i = 0; i < predefinedTags.Length; i++)
                {
                    var tag = predefinedTags[i];
                    if (i < 30)
                    {
                        <div class="checkbox-wrapper">
                            <div class="tag-item">
                                <input type="checkbox" name="PredefinedTags" value="@tag" id="@tag" />
                                <label for="@tag">@tag</label>
                            </div>
                        </div>
                    }
                }
            }
        </div>
    </div>

    <p class="form-label">Add Your Own User-Defined Tags to help improve search (Optional)*</p>
    <div class="tag-area form-control">
        <p class="form-label">Press Space or add a Comma after each tag</p>
        <div>
            <div class="content bg-dark">
                <ul class="list-view ul-tag">
                    <input class="tag-input bg-dark" style="color:#FFFFFF;" type="text" spellcheck="false" />
                </ul>
            </div>
            <p class="form-label"><span id="tag-remain">10</span> tags remaining</p>
            <span id="error-span" style="color: red"></span>
        </div>
        <div class="details">
            <button type="button" class="remove-button btn btn-danger">Remove All</button>
        </div>
    </div>

    <div class="mb-3">
        <label class="form-label">Upload Content* (Allowed: JPG, JPEG, PNG, MP4)</label>
        <input id="files" type="file" accept="video/*,image/*" name="uploadedFiles" required class="form-control" onchange="validateFiles()" />
        <span id="alert-files" class="text-danger"></span>
        <span asp-validation-for="ContentPath" class="text-danger"></span>
    </div>

    <input type="hidden" id="tagdata" name="tagdata" value="">

    <div id="progress-container" style="display: none; margin-bottom: 15px;">
        <div class="progress">
            <div id="progress-bar" class="progress-bar progress-bar-striped progress-bar-animated"
                 role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
            </div>
        </div>
        <p id="progress-text" style="text-align: center; margin-top: 5px;">Uploading...</p>
    </div>

    <div class="d-flex flex-column flex-md-row justify-content-center gap-2">
        <button type="submit" class="btn btn-sm btn-primary" id="submit-btn">Submit</button>
        <a asp-controller="UploadContent" asp-action="BackToList" class="btn btn-sm btn-secondary">Back to List</a>
    </div>
</form>

@section Scripts {
    <script>
        function updateTitleCount() {
            var input = document.getElementById("titleInput");
            var counter = document.getElementById("titleCounter");
            counter.textContent = input.value.length + " / 90 characters";
        }

        function updateDescriptionCount() {
            var input = document.getElementById("descriptionInput");
            var counter = document.getElementById("descriptionCounter");
            counter.textContent = input.value.length + " / 490 characters";
        }
    </script>

    <script>
        const tagliststring = @Html.Raw(tagliststring);
    </script>

    <script src="~/js/TagInput.js" asp-append-version="true"></script>

    <script>
        function showError(message) {
            message += `<br><br>Need to convert your file? <a href="https://convertio.co/" target="_blank" style="color: red; text-decoration: underline;">Click here</a>`;
            document.getElementById("errorModalText").innerHTML = message;
            var errorModal = new bootstrap.Modal(document.getElementById("errorModal"));
            errorModal.show();
        }

        function validateFiles() {
            const fileInput = document.getElementById('files');
            const alertSpan = document.getElementById('alert-files');
            const file = fileInput.files[0];
            const allowedExtensions = /(\.jpg|\.jpeg|\.png|\.mp4)$/i;

            if (!file) {
                alertSpan.textContent = '';
                return;
            }

            if (!allowedExtensions.exec(file.name)) {
                showError('Invalid file type. Please upload a JPG, JPEG, PNG, or MP4 file. For GIFs, you can convert them into MP4 format.');
                fileInput.value = '';
                return;
            }

            const maxSize = 200 * 1024 * 1024;
            if (file.size > maxSize) {
                alertSpan.textContent = 'File size exceeds 200MB limit.';
                fileInput.value = '';
                return;
            }

            alertSpan.textContent = '';
        }
    </script>
}
