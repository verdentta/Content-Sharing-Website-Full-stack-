@model UploadContent
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims

<link rel="stylesheet" href="~/css/tagTheme.css" />

@{
    var predefinedTags = new[]
    {
        "Romantic", "Hardcore", "Fantasy", "Roleplay", "Amateur", "Professional", "Fetish", "Cosplay",
        "Straight", "Lesbian", "Gay", "Bisexual", "Solo", "Group",
        "Slim", "Curvy", "Mature", "Big Breasts", "Interracial",
        "Trans", "Furry", "Cartoon",
        "Outdoor", "Public", "Office", "Bedroom",
        "AI-Gen", "Big Ass", "Trending", "Anime"
    };

    var selectedPredefinedTags = Model.Tags?.Select(t => t.Name).Intersect(predefinedTags).ToList() ?? new List<string>();
    var userDefinedTags = Model.Tags?.Select(t => t.Name).Except(predefinedTags).ToList() ?? new List<string>();
}

@if (Model.UserId == User.FindFirst(ClaimTypes.NameIdentifier)?.Value)
{
    @if (TempData["EditError"] != null)
    {
        <div class="alert alert-danger text-center">@TempData["EditError"]</div>
    }
    <form method="post" asp-action="Edit" enctype="multipart/form-data" class="text-center" id="editForm">
        @Html.AntiForgeryToken() <!-- Add AntiForgeryToken for the form -->
        <div asp-validation-summary="All" class="text-danger"></div>

        <!-- Error Modal -->
        <div class="modal fade" id="errorModal" tabindex="-1" aria-labelledby="errorModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="errorModalLabel">Error</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <p id="errorModalText"></p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Delete Confirmation Modal -->
        <div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="deleteModalLabel">Confirm Deletion</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        Are you sure you want to delete this content? This action cannot be undone.
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-danger" id="confirmDeleteButton">Delete</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Title Field -->
        <div class="mb-3">
            <label asp-for="Title"></label>
            <input asp-for="Title" required class="form-control" maxlength="90" id="titleInput" oninput="updateTitleCount()" />
            <small id="titleCounter" class="text-muted">0 / 90 characters</small>
            <span asp-validation-for="Title" class="text-danger"></span>
        </div>

        <!-- Description Field -->
        <div class="mb-3">
            <label for="Description">Description</label>
            <textarea asp-for="Description" class="form-control" maxlength="490" id="descriptionInput" oninput="updateDescriptionCount()"></textarea>
            <small id="descriptionCounter" class="text-muted">0 / 490 characters</small>
            <span asp-validation-for="Description" class="text-danger"></span>
        </div>

        <!-- Predefined Tags Section -->
        <p class="form-label">Predefined Tags (minimum 2 tags):</p>
        <div class="mb-3 tag-grid">
            <div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(100px, 1fr)); gap: 10px;">
                @foreach (var tag in predefinedTags)
                {
                    <div class="checkbox-wrapper">
                        <div>
                            <input type="checkbox" name="PredefinedTags" value="@tag" id="@tag" @(selectedPredefinedTags.Contains(tag) ? "checked" : "") />
                            <label for="@tag">@tag</label>
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- User-Defined Tags Section -->
        <p class="form-label">User-Defined Tags (Optional)*</p>
        <div class="tag-area form-control">
            <p class="form-label">Press Space or add a Comma after each tag</p>
            <div>
                <div class="content bg-dark">
                    <ul class="list-view ul-tag">
                        <input class="tag-input bg-dark" style="color:#FFFFFF;" type="text" spellcheck="false" />
                    </ul>
                </div>
                <p class="form-label"><span id="tag-remain">10</span> tags remaining</p>
                <span id="error-span" style="color: red"></span>
            </div>
            <div class="details">
                <button type="button" class="remove-button btn btn-danger">Remove All</button>
            </div>
        </div>
        <input type="hidden" id="tagdata" name="tagdata" value="">

        <div class="d-flex flex-column flex-md-row justify-content-center gap-2">
            <!-- Buttons -->
            <button type="submit" id="updateButton" class="btn btn-primary" style="width:150px">Update</button>
            <!-- Delete Button (Trigger Modal) -->
            <button type="button" class="btn btn-danger" style="width:150px" data-bs-toggle="modal" data-bs-target="#deleteConfirmModal">
                Delete
            </button>
            <a asp-controller="UploadContent" asp-action="BackToList" class="btn btn-secondary" style="width:150px">Back To List</a>
        </div>

        <!-- Hidden field to store the ID for deletion -->
        <input type="hidden" id="contentId" value="@Model.Id" />
    </form>
}
else
{
    <p class="text-center">You are not the author of this content</p>
}

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        const userDefinedTags = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(userDefinedTags));
        const predefinedTags = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(predefinedTags));

        const tagInputElement = document.querySelector(".tag-input");
        const ulElement = document.querySelector(".list-view");
        const tagInputHidden = document.getElementById("tagdata");

        // Load user-defined tags into tag input UI
        function loadUserTags(tags) {
            tags.forEach(tag => {
                let liTag = `<li class="bg-secondary li-tag">${tag}<i onclick="Remove(this, '${tag}')">x</i></li>`;
                ulElement.insertAdjacentHTML("afterbegin", liTag);
            });
            tagInputHidden.value = JSON.stringify(tags);
        }

        // Initialize with user-defined tags
        loadUserTags(userDefinedTags);

        // ---- VALIDATION TRIGGERS ONLY ON FORM SUBMISSION ----
        function validatePredefinedTagsEdit() {
            const selectedPredefinedTags = Array.from(document.querySelectorAll("input[name='PredefinedTags']:checked"))
                .map(cb => cb.value);

            if (selectedPredefinedTags.length < 2) {
                showErrorForTags("Please select at least 2 predefined tags.");
                return false;
            }

            return true;
        }

        // Show error inside the Bootstrap modal
        function showErrorForTags(message) {
            document.getElementById("errorModalText").innerText = message;
            var errorModal = new bootstrap.Modal(document.getElementById("errorModal"));
            errorModal.show();
        }

        // When the user clicks "Update", run validation
        document.getElementById("updateButton").addEventListener("click", function (event) {
            if (!validatePredefinedTagsEdit()) {
                event.preventDefault(); // Stop form submission if validation fails
            } else {
                document.querySelector("form").submit(); // Submit form if valid
            }
        });

        // Handle Delete Confirmation
        document.getElementById("confirmDeleteButton").addEventListener("click", function () {
            const contentId = document.getElementById("contentId").value;
            const deleteForm = document.createElement("form");
            deleteForm.method = "post";
            deleteForm.action = "@Url.Action("Delete", "UploadContent")/" + contentId;

            // Add anti-forgery token to the form
            const token = document.querySelector("input[name='__RequestVerificationToken']").value;
            const tokenInput = document.createElement("input");
            tokenInput.type = "hidden";
            tokenInput.name = "__RequestVerificationToken";
            tokenInput.value = token;
            deleteForm.appendChild(tokenInput);

            document.body.appendChild(deleteForm);
            deleteForm.submit();
        });
    </script>

    <script>
        function updateTitleCount() {
            var input = document.getElementById("titleInput");
            var counter = document.getElementById("titleCounter");
            counter.textContent = input.value.length + " / 90 characters";
        }

        function updateDescriptionCount() {
            var input = document.getElementById("descriptionInput");
            var counter = document.getElementById("descriptionCounter");
            counter.textContent = input.value.length + " / 490 characters";
        }
    </script>

    <script src="~/js/TagInput.js" asp-append-version="true"></script>
}